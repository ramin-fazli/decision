# Build and Push Decision Platform Images to Google Artifact Registry
# Required GitHub Secrets:
# - GCP_SA_KEY: Service account key JSON for GCP authentication
# - GCP_PROJECT_ID: Google Cloud Project ID

name: Build and Push to Artifact Registry

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GAR_LOCATION: us-east4
  GAR_REPOSITORY: decision-platform
  BACKEND_IMAGE_NAME: decision-backend
  FRONTEND_IMAGE_NAME: decision-frontend

jobs:
  # Job 1: Build and push backend to Artifact Registry
  build-backend:
    name: Build and Push Backend Image
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: latest

    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

    - name: Create Artifact Registry repository (if needed)
      run: |
        gcloud artifacts repositories create ${{ env.GAR_REPOSITORY }} \
          --repository-format=docker \
          --location=${{ env.GAR_LOCATION }} \
          --project=${{ secrets.GCP_PROJECT_ID }} \
          --description="Decision platform Docker images" 2>/dev/null || true

    - name: Extract backend metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          BUILD_VERSION=${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 2: Build and push frontend to Artifact Registry
  build-frontend:
    name: Build and Push Frontend Image
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: latest

    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

    - name: Extract frontend metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          BUILD_VERSION=${{ github.ref_name }}
          NEXT_PUBLIC_API_URL=http://localhost:8000
          NODE_ENV=production
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Summary job to display build results
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: always()

    steps:
    - name: Display build results
      run: |
        echo "üèóÔ∏è Build Summary for Decision Platform"
        echo "=================================="
        echo ""
        echo "üì¶ Backend Build:"
        echo "   Status: ${{ needs.build-backend.result }}"
        echo "   Image: ${{ needs.build-backend.outputs.image-tag }}"
        echo "   Digest: ${{ needs.build-backend.outputs.image-digest }}"
        echo ""
        echo "üåê Frontend Build:"
        echo "   Status: ${{ needs.build-frontend.result }}"
        echo "   Image: ${{ needs.build-frontend.outputs.image-tag }}"
        echo "   Digest: ${{ needs.build-frontend.outputs.image-digest }}"
        echo ""
        echo "üéØ Artifact Registry:"
        echo "   Location: ${{ env.GAR_LOCATION }}"
        echo "   Repository: ${{ env.GAR_REPOSITORY }}"
        echo "   Project: ${{ secrets.GCP_PROJECT_ID }}"
        echo ""
        if [ "${{ needs.build-backend.result }}" = "success" ] && [ "${{ needs.build-frontend.result }}" = "success" ]; then
          echo "‚úÖ All images built and pushed successfully!"
        else
          echo "‚ùå Some builds failed. Check the logs above."
        fi
